<template>
    <div>
      <MintHero
        breadcrumb-no-current
        class="page-hero search"
        :title="store.surveyName"
      >
          <!-- asdafasdf -->
      </MintHero>
      <div class="container pt-4 main-panel">
        <div class="survey">
          
          <!-- Summary page -->
          <div v-if="!isSurveyStarted" class="summary">
            <h2>About this survey</h2>
            <p>{{ store.description }}</p>
            <p>
              The information you provide in this survey will be used to assist the improvement of apprenticeship
              programs. Your input is valuable to us
            </p>
            <button @click="startSurvey">Start Survey</button>
          </div>

          <!-- Question page -->
          <!-- <template v-else v-for="question in sortedQuestions" :key="question.SurveyQuestionID"> -->
          <div v-else class="question-page">
            <!-- Use the computed activeQUestion to show the currently selected question -->
            <div  v-if="activeQuestion" class="question-item">

              <!-- Display question code and text -->
              <p class="question-header">
                {{  activeQuestion.QuestionCode }} - {{ activeQuestion.QuestionText }}
              </p>

              <!-- SSELCT: display radio button group -->
              <div v-if="activeQuestion.QuestionTypeCode === 'SSELCT'">
                <div
                  v-for="option in sortedAnswers(activeQuestion.SurveyAnswers)"
                  :key="option.SurveyAnswerId"
                  class="option-item"
                >
                  <label>
                    <input
                      type="radio"
                      :name="`question-${activeQuestion.SurveyQuestionID}`"
                      :value="option.SurveyAnswerId"
                      v-model="responses[activeQuestion.SurveyQuestionID]"
                      @change="handleRadioChange(activeQuestion.SurveyQuestionID, option.SurveyAnswerId)"
                    />
                    {{ getAnswerText(option.SurveyAnswerId) }}
                  </label>
                </div>
              </div>

              <!-- FTEXT: display textarea for free-text response -->
              <div v-else-if="activeQuestion.QuestionTypeCode === 'FTEXT'">
                <textarea
                  :placeholder="'Type your answer here...'"
                  v-model="responses[activeQuestion.SurveyQuestionID]"
                  ></textarea>
              </div>

              <!-- MSELCT: display textarea for free-text response -->
              <div v-else-if="activeQuestion.QuestionTypeCode === 'MSELCT'">
                <div
                  v-for="option in sortedAnswers(activeQuestion.SurveyAnswers)"
                  :key="option.SurveyAnswerId"
                  class="option-item"
                >
                  <label>
                    <input
                      type="checkbox"
                      :value="option.AnswerId"
                      v-model="responses[activeQuestion.SurveyQuestionID]"
                    />
                    {{ getAnswerText(option.SurveyAnswerId) }}
                  </label>
                </div>
              </div>
            </div>

            <div class="navigation-buttons">
              <button v-if="currentQuestionIndex > 0" @click="prevQuestion">Previous</button>
              <button v-if="hasNextQuestion" @click="nextQuestion">Next</button>
              <button v-else @click="finishSurvey">Finish Survey</button>
            </div>

          </div>
          <!-- Debug: Display current responses -->
           <pre>{{ responses }}</pre>
        </div>

        <!-- {{ store.template }} -->
      </div>

    </div>
</template>

<script lang="ts">
import { defineComponent, PropType } from "vue";
import {
  MintCard, MintFieldset, MintRadio, MintButton, MintLink,
  MintLoadingSuspense, MintMarkdownRenderer
} from "@gov-au/mint-ui";
//import {  } from "@/models/adms-survey.type";
import { useAdmsSurveyStore } from "@/stores/adms-survey.store";
import { storeToRefs } from "pinia";

export default defineComponent({
  components: {
    MintCard,
    MintFieldset,
    MintRadio,
    MintButton,
    MintLink,
    MintLoadingSuspense,
    MintMarkdownRenderer,
  },
  data() {
    const store = useAdmsSurveyStore();

    return {
      store,
      isSurveyStarted: false,
      currentQuestionIndex: -1,
      responses: {}, // Stores user responses keyed by SurveyQuestionID
      updatingResponses: false, // Guard flag to avoid infinite recursion
    };
  },
  async mounted() {
    const recipientExternalId = this.$route.params.recipientExternalId;
    await this.store.fetchRecipientSurvey(recipientExternalId);
  },
  created() {
    this.sortedQuestions.forEach((question) => {
      if(this.responses[question.SurveyQuestionID] === undefined) {
        if(question.QuestionTypeCode === 'MSELCT') {
          this.responses[question.SurveyQuestionID] = [];
        } else if(question.QuestionTypeCode === 'SSELCT') {
          this.responses[question.SurveyQuestionID] = null;
        } else {
          this.responses[question.SurveyQuestionID] = '';
        }
      }
    });
  },
  computed: {
    // Sorts the questions correctly
    sortedQuestions() {
      const questions = this.store.template?.questions || [];
      return questions.slice().sort((a, b) => a.QuestionOrderNumber - b.QuestionOrderNumber);
    },
    activeQuestion() {
      return this.sortedQuestions[this.currentQuestionIndex] || null;
    },
    hasNextQuestion() {
      let idx = this.currentQuestionIndex++;
      while(idx < this.sortedQuestions.length) {
        if(this.shouldDisplayQuestion(this.sortedQuestions[idx])) {
          return true;
        }
        idx++;
      }
      return false;
    }
  },
  watch: {
    responses: {
      handler(newResponses) {
        if(this.updatingResponses) return;
        this.updatingResponses = true;
        this.store.updateResponses(newResponses);
        this.updatingResponses = false;
        //this.resetHiddenResponses();
      },
      deep: true
    }
  },
  methods: {
    startSurvey() {
      this.isSurveyStarted = true;
      this.currentQuestionIndex = this.findNextVisibleQuestion(-1, 1);
    },
    findNextVisibleQuestion(startIndex, step) {
      let newIndex = startIndex + step;
      while(newIndex >= 0 &&
            newIndex < this.sortedQuestions.length &&
            !this.shouldDisplayQuestion(this.sortedQuestions[newIndex])
          ) {
              newIndex += step;
      }

      return newIndex;
    },
    nextQuestion() {
      const newIndex = this.findNextVisibleQuestion(this.currentQuestionIndex, 1);
      if(newIndex < this.sortedQuestions.length) {
        this.currentQuestionIndex = newIndex;
      } else {
        this.finishSurvey();
      }
    },
    prevQuestion() {
      const newIndex = this.findNextVisibleQuestion(this.currentQuestionIndex, -1);
      if(newIndex >= 0) {
        this.currentQuestionIndex = newIndex;
      }
    },
    async finishSurvey() {
      console.log("Survey Finished");

      const recipientExternalId = this.$route.params.recipientExternalId;
      await this.store.submitResponses(recipientExternalId);
    },
    sortedAnswers(answers) {
      if(!answers) return [];
      return answers.slice().sort((a, b) => a.AnswerOrderNumber - b.AnswerOrderNumber)
    },
    getAnswerText(answerId) {
      const answerObj = this.store.template?.answers?.find(ans => ans.SurveyAnswerId === answerId);
      return answerObj ? answerObj.AnswerText : '';
    },
    // Optional, here for debugging
    handleRadioChange(questionId, answerId) {
      console.log(`Question ${questionId} updated to answer ${answerId}`);
    },
    shouldDisplayQuestion(question) {
      if(!question.IsConditionalQuestion) {
        return true;
      }

      if(question.ConditionalQuestions && question.ConditionalQuestions.length) {
        return question.ConditionalQuestions.every((condition) => {
// console.log('Condition (', question.SurveyQuestionID, '): ', condition);
          const parentResponse = this.responses[condition.SurveyConditionalQuestionId];

          // For radio / text responsnes, compare directly
          // For multi-select check if the condition's SurveyAnswerId is included
          if(Array.isArray(parentResponse)) {
            return parentResponse.includes(Number(condition.SurveyAnswerId));
          } else {
            return String(parentResponse) === String(condition.SurveyAnswerId);
          }
        });

      }

      // If no conditions are provided then default to not displaying
      return false;
    },

    // If user answers a conditional question, but then alters the parent question that 
    // hides the dependent one then the selected answers that are now hidden should be reset.
    // resetHiddenResponses() {
    //   let updated = false;

    //   // Create a new copy of the responses;
    //   const newResponses = { ... this.responses };

    //   this.sortedQuestions.forEach((question) => {
    //     if(!this.shouldDisplayQuestion(question)) {
    //       const key = question.SurveyQuestionID;

    //       if(question.QuestionTypeCode === 'SSELCT' && newResponses[key] !== null) {
    //         newResponses[key] = null;
    //         updated = true;
    //       } else if(question.QuestionTypeCode === 'FTEXT' && newResponses[key] !== '') {
    //         newResponses[key] = '';
    //         updated = true;
    //       } else if(question.QuestionTypeCode === 'MSELCT' && Array.isArray(newResponses[key]) && newResponses[key].length > 0) {
    //         newResponses[key] = [];
    //         updated = true;
    //       }
    //     }
    //   });

    //   if(updated) {
    //     this.responses = newResponses;
    //   }

    // },
  },
});
</script>
